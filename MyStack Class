import java.util.NoSuchElementException;

public class MyStack implements IStack {
	// add any necessary variables here
	private Node head = null;
   private int size = 0;

	@Override
	public void push(Object item) {
      Node newNode = new Node(item);
      newNode.next = head;
      head = newNode;
      size++;
	}

	@Override
	public Object pop() {
      if (isEmpty()) {
         throw new NoSuchElementException();
      }
      Object item = head.item;
      head = head.next;
      size--;
      return item;
	}

	@Override
	public Object peek() {
      if (isEmpty()) {
         throw new NoSuchElementException();
      }
      return head.item;
	}

	@Override
	public int indexOf(Object item) {
      Node current = head;
      int index = 0;
      while (current != null) {
         if (current.item.equals(item)) {
            return index;
         }
         current = current.next;
         index++;
      }
      return -1;
	}

	@Override
	public int size() {
      return size;
	}

	@Override
	public boolean isEmpty() {
      return (size == 0);
	}

	// add any necessary methods or classes below
	private class Node {
      Object item;
      Node next;

      public Node(Object item) {
         this.item = item;
         this.next = null;
      }
   }
}
