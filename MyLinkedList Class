// Complete the implementation of your MyLinkedList class in this file
import java.util.NoSuchElementException;

public class MyLinkedList implements MyList {
    // Implement the required fields and methods here
   private Node head = null;
   private int size = 0;
    
   public void addToEnd(Object item) {
      Node newNode = new Node();
      newNode.data = item;
      newNode.next = null;
      
      if (head == null) {
         head = newNode;
      } else {
      
      Node current = head;
		while (current.next != null) {
			current = current.next;
		}
		
		current.next = newNode; 
		size++;
      }
   }
   
   public void insertAt(int index, Object item) {
      if (index < 0 || index > size+1) {
         throw new NoSuchElementException();
      } else {
      
      Node newNode = new Node();
      newNode.data = item;
      
      if (index == 0) {
			newNode.next = head;
			head = newNode;
		} 

		Node current = head;
		for (int i = 0; i < index - 1; i++) {
			current = current.next;
		}
			
		newNode.next = current.next;
		current.next = newNode;

		size++;
      }
      
   }
   
   public void removeAt(int index) {
      if (index < 0 || index > size) {
         throw new NoSuchElementException();
      } else {
      
      if (index == 0) {
			head = head.next;
		} 

		Node current = head;
		for (int i = 0; i < index - 1; i++) {
			current = current.next;			
		}
			
		if (current.next != null) {
		   current.next = current.next.next;
		} 
		else {
         current.next = null;
		}

		size--;
      }
   }
   
   public Object getAt(int index) {
      if (index < 0 || index > size) {
         throw new NoSuchElementException();
      } else {
      
      Node current = head;
		for (int i = 0; i < index; i++) {
			current = current.next;
		}
      
		return current.data;
      }
   }

   public int getSize() { return size; }
   
	// Do not alter the code below 
	public MyListIterator getIterator() {
		return new MyLinkedListIterator();
	}
	
	private class MyLinkedListIterator implements MyListIterator {
		Node currentNode = null;

		@Override
		public Object next() {
			if (currentNode != null)
				currentNode = currentNode.next;
			else
				currentNode = head;

			return currentNode.data;
		}

		@Override
		public boolean hasNext() {
			if (currentNode != null)
				return currentNode.next != null;
			else
				return head != null;
		}
	}
	
	class Node {
		public Object data = null;
		public Node next = null;
	}
}
